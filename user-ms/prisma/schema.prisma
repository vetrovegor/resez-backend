generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id               String    @id @default(uuid())
  nickname         String
  password         String
  telegramChatId   String    @map("telegram_chat_id")
  isVerified       Boolean   @map("is_verified")
  isBlocked        Boolean   @map("is_blocked")
  blockReason      String    @map("block_reason")
  xp               Int
  avatar           String
  firstName        String    @map("first_name")
  lastName         String    @map("last_name")
  birthDate        DateTime  @map("birth_date")
  gender           Gender
  registrationDate DateTime  @map("registration_date")
  isPrivateAccount Boolean   @map("is_private_account")
  isHideAvatars    Boolean   @map("is_hide_avatars")
  Session          Session[]
  Code             Code[]
}

enum DeviceType {
  BOT
  TV
  MOBILE
  TABLET
  DESKTOP
}

model Session {
  id             String     @id @default(uuid())
  isActive       Boolean    @map("is_active")
  date           DateTime
  expiredDate    DateTime   @map("expired_date")
  ip             String
  deviceType     DeviceType @map("device_type")
  country        String
  city           String
  browser        String
  browserVersion String     @map("browser_version")
  os             String
  platform       String
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String     @map("user_id")
  Token          Token[]
}

model Token {
  id        String  @id @default(uuid())
  token     String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String  @map("session_id")
}

enum CodeType {
  VERIFICATION
  RETRY_PASSWORD
  CHANGE_PASSWORD
}

model Code {
  id          String   @id @default(uuid())
  code        String
  retryDate   DateTime @map("retry_date")
  expiredDate DateTime @map("expired_date")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @map("user_id")
}
